import pandas as pd
import numpy as np

table_feI_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
    3900: [0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.01, 0.00],
    3800: [0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00],
    3700: [0.06, 0.04, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.07, 0.06, 0.04, 0.04, 0.05, 0.05, 0.03, 0.03, 0.04, 0.04, 0.01, 0.02, 0.02, 0.02],
    3500: [0.10, 0.09, 0.08, 0.07, 0.05, 0.05, 0.05, 0.04, 0.03, 0.04, 0.02, 0.01, 0.02, 0.01],
    3400: [0.10, 0.07, 0.04, 0.04, 0.03, 0.03, 0.03, 0.02, 0.02, 0.03, 0.02, 0.02, 0.02, 0.02],
    3300: [0.14, 0.09, 0.06, 0.04, 0.07, 0.05, 0.05, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03],
    3200: [0.20, 0.08, 0.06, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.02],
}

table_feH_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.03, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.04, 0.03, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00],
    3700: [0.04, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.01, 0.01, 0.01, 0.01],
    3500: [0.03, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.01, 0.00],
    3400: [0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.01, 0.01, 0.01],
    3300: [0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00],
    3200: [0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
}

table_oh_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3900: [0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3800: [0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3700: [0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3600: [0.02, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3500: [0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3400: [0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3300: [0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.01, 0.00, 0.00],
    3200: [0.04, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00],
}

table_h2o_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3900: [0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    3800: [0.06, 0.05, 0.03, 0.03, 0.04, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.06, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00],
    3500: [0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
    3400: [0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.00],
    3300: [0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00],
    3200: [0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00],
}

table_co_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.09, 0.07, 0.06, 0.05, 0.04, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.03, 0.03, 0.02],
    3900: [0.08, 0.07, 0.07, 0.06, 0.04, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03],
    3800: [0.10, 0.08, 0.06, 0.04, 0.05, 0.05, 0.03, 0.04, 0.04, 0.02, 0.02, 0.02, 0.03, 0.02],
    3700: [0.05, 0.05, 0.03, 0.03, 0.02, 0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.05, 0.05, 0.03, 0.03, 0.02, 0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.20, 0.11, 0.10, 0.10, 0.08, 0.06, 0.04, 0.03, 0.05, 0.05, 0.03, 0.03, 0.03, 0.03],
    3400: [0.22, 0.24, 0.15, 0.13, 0.07, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03],
    3300: [0.16, 0.12, 0.10, 0.07, 0.06, 0.04, 0.05, 0.03, 0.04, 0.03, 0.05, 0.03, 0.03, 0.04],
    3200: [0.20, 0.24, 0.13, 0.12, 0.11, 0.06, 0.05, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.03],
}

table_na_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.16, 0.09, 0.07, 0.07, 0.02, 0.02, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.13, 0.12, 0.11, 0.06, 0.06, 0.08, 0.02, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01],
    3800: [0.23, 0.08, 0.09, 0.06, 0.06, 0.02, 0.05, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.26, 0.19, 0.13, 0.12, 0.10, 0.06, 0.07, 0.07, 0.03, 0.04, 0.05, 0.01, 0.01, 0.03],
    3600: [0.22, 0.12, 0.11, 0.07, 0.06, 0.06, 0.05, 0.04, 0.05, 0.03, 0.03, 0.03, 0.02, 0.03],
    3500: [0.10, 0.08, 0.09, 0.05, 0.05, 0.03, 0.04, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02],
    3400: [0.15, 0.13, 0.11, 0.03, 0.03, 0.02, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01],
    3300: [0.84, 0.26, 0.16, 0.14, 0.12, 0.12, 0.11, 0.09, 0.09, 0.09, 0.08, 0.01, 0.01, 0.01],
    3200: [0.28, 0.20, 0.14, 0.12, 0.11, 0.08, 0.04, 0.06, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01],
}

table_mg_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.04, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.06, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.05, 0.05, 0.02, 0.03, 0.02, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.06, 0.04, 0.02, 0.01, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.07, 0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.06, 0.04, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3400: [0.07, 0.05, 0.04, 0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01],
    3300: [0.10, 0.09, 0.08, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01],
    3200: [0.14, 0.08, 0.05, 0.05, 0.04, 0.03, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.02],
}

table_al_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.05, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.05, 0.05, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.05, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3400: [0.05, 0.04, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3300: [0.06, 0.03, 0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3200: [0.06, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
}

table_si_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.06, 0.03, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.05, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01],
    3700: [0.07, 0.07, 0.04, 0.03, 0.02, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01],
    3600: [0.10, 0.08, 0.07, 0.07, 0.03, 0.03, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.02],
    3500: [0.19, 0.12, 0.07, 0.06, 0.05, 0.07, 0.05, 0.05, 0.06, 0.06, 0.05, 0.05, 0.04, 0.03],
    3400: [0.20, 0.11, 0.13, 0.10, 0.09, 0.07, 0.06, 0.05, 0.07, 0.07, 0.05, 0.04, 0.04, 0.04],
    3300: [0.32, 0.23, 0.26, 0.16, 0.15, 0.14, 0.15, 0.14, 0.13, 0.12, 0.12, 0.12, 0.12, 0.11],
    3200: [0.91, 0.22, 0.23, 0.20, 0.18, 0.16, 0.16, 0.16, 0.13, 0.13, 0.12, 0.12, 0.12, 0.12],
}

table_k_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.04, 0.04, 0.04, 0.02, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.05, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3400: [0.05, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3300: [0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3200: [0.05, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
}

table_ca_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.04, 0.03, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00],
    3800: [0.04, 0.04, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.05, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.04, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.05, 0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3400: [0.06, 0.05, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3300: [0.07, 0.04, 0.04, 0.04, 0.03, 0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3200: [0.09, 0.07, 0.03, 0.04, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01],
}

table_ti_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.03, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.04, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.04, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.05, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3400: [0.05, 0.04, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3300: [0.05, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3200: [0.05, 0.04, 0.04, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
}

table_v_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.15, 0.09, 0.06, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.03, 0.02, 0.02, 0.02],
    3900: [0.14, 0.09, 0.07, 0.07, 0.07, 0.03, 0.04, 0.04, 0.03, 0.02, 0.03, 0.02, 0.02, 0.03],
    3800: [0.12, 0.10, 0.06, 0.04, 0.04, 0.03, 0.04, 0.03, 0.03, 0.02, 0.01, 0.02, 0.01, 0.02],
    3700: [0.11, 0.11, 0.06, 0.09, 0.05, 0.06, 0.04, 0.03, 0.03, 0.03, 0.03, 0.02, 0.03, 0.03],
    3600: [0.11, 0.11, 0.06, 0.09, 0.05, 0.06, 0.04, 0.03, 0.03, 0.03, 0.03, 0.02, 0.03, 0.03],
    3500: [0.22, 0.18, 0.10, 0.08, 0.08, 0.07, 0.06, 0.05, 0.05, 0.05, 0.06, 0.05, 0.04, 0.03],
    3400: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3300: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3200: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

table_cr_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.11, 0.07, 0.05, 0.05, 0.03, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01],
    3900: [0.14, 0.08, 0.05, 0.04, 0.02, 0.04, 0.03, 0.03, 0.03, 0.04, 0.02, 0.01, 0.02, 0.02],
    3800: [0.07, 0.07, 0.07, 0.06, 0.04, 0.04, 0.03, 0.04, 0.02, 0.03, 0.03, 0.02, 0.02, 0.02],
    3700: [0.20, 0.10, 0.07, 0.07, 0.06, 0.06, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.02, 0.03],
    3600: [0.20, 0.10, 0.07, 0.07, 0.06, 0.06, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.02, 0.03],
    3500: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3400: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3300: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3200: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

table_mn_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.04, 0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3900: [0.05, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3800: [0.05, 0.04, 0.03, 0.02, 0.03, 0.02, 0.01, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
    3700: [0.11, 0.05, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3600: [0.11, 0.05, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01],
    3500: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3400: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3300: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3200: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

table_ni_data = {
    "S/N": [40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300],
    4000: [0.12, 0.08, 0.07, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01],
    3900: [0.14, 0.08, 0.10, 0.11, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.04, 0.04, 0.03, 0.03],
    3800: [0.15, 0.11, 0.11, 0.11, 0.08, 0.08, 0.06, 0.05, 0.07, 0.05, 0.05, 0.04, 0.05, 0.05],
    3700: [0.22, 0.14, 0.13, 0.11, 0.13, 0.07, 0.07, 0.11, 0.06, 0.06, 0.05, 0.05, 0.04, 0.04],
    3600: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3500: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3400: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3300: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    3200: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

df_table_feI = pd.DataFrame(table_feI_data)
df_table_feH = pd.DataFrame(table_feH_data)
df_table_oh = pd.DataFrame(table_oh_data)
df_table_h2o = pd.DataFrame(table_h2o_data)
df_table_co = pd.DataFrame(table_co_data)
df_table_na = pd.DataFrame(table_na_data)
df_table_mg = pd.DataFrame(table_mg_data)
df_table_al = pd.DataFrame(table_al_data)
df_table_si = pd.DataFrame(table_si_data)
df_table_k = pd.DataFrame(table_k_data)
df_table_ca = pd.DataFrame(table_ca_data)
df_table_ti = pd.DataFrame(table_ti_data)
df_table_v = pd.DataFrame(table_v_data)
df_table_cr = pd.DataFrame(table_cr_data)
df_table_mn = pd.DataFrame(table_mn_data)
df_table_ni = pd.DataFrame(table_ni_data)

dataframes = {
    'Fe': df_table_feI,
    'FeH': df_table_feH,
    'OH': df_table_oh,
    'H2O': df_table_h2o,
    'CO': df_table_co,
    'Na': df_table_na,
    'Mg': df_table_mg,
    'Al': df_table_al,
    'Si': df_table_si,
    'K': df_table_k,
    'Ca': df_table_ca,
    'Ti': df_table_ti,
    'V': df_table_v,
    'Cr': df_table_cr,
    'Mn': df_table_mn,
    'Ni': df_table_ni
}


'''
# Função para buscar incertezas
def get_uncertainty_signal(temperatura, sinal_ruido, elemento):
    temperaturas_disponiveis = [col for col in dataframes['Fe'].columns if isinstance(col, int)]
    temperatura_aproximada = min(temperaturas_disponiveis, key=lambda x: abs(x - temperatura))

    if elemento == "all":
        resultados = {}
        for elem, df in dataframes.items():
            resultado = df[df['S/N'] == sinal_ruido][temperatura_aproximada]
            resultados[elem] = float(resultado.values[0]) if not resultado.empty else None
        return resultados
    else:
        # Caso específico para um elemento
        df = dataframes.get(elemento)
        if df is not None:
            resultado = df[df['S/N'] == sinal_ruido][temperatura_aproximada]
            return float(resultado.values[0]) if not resultado.empty else None
        else:
            return None


# Exemplo de uso
temperatura = int(input("Digite a temperatura desejada (exemplo: 4000): "))
sinal_ruido = int(input("Digite o sinal ruído: "))
elemento = str(input("Digite o elemento ou all: "))
resultados = get_uncertainty_signal(temperatura, sinal_ruido, elemento)
print(resultados)
'''

'''
# Função para buscar incertezas com aproximação do sinal-ruído e da temperatura
def get_uncertainty_signal(temperatura, sinal_ruido, elemento):
    # Aproxima a temperatura para a mais próxima disponível
    temperaturas_disponiveis = [col for col in dataframes['Fe'].columns if isinstance(col, int)]
    temperatura_aproximada = min(temperaturas_disponiveis, key=lambda x: abs(x - temperatura))

    if elemento == "all":
        resultados = {}
        for elem, df in dataframes.items():
            # Aproxima o sinal-ruído para o mais próximo disponível na tabela
            sinais_ruido_disponiveis = df['S/N'].tolist()
            sinal_ruido_aproximado = min(sinais_ruido_disponiveis, key=lambda x: abs(x - sinal_ruido))

            resultado = df[df['S/N'] == sinal_ruido_aproximado][temperatura_aproximada]
            resultados[elem] = float(resultado.values[0]) if not resultado.empty else None
        return resultados
    else:
        # Caso específico para um elemento
        df = dataframes.get(elemento)
        if df is not None:
            # Aproxima o sinal-ruído para o mais próximo disponível na tabela
            sinais_ruido_disponiveis = df['S/N'].tolist()
            sinal_ruido_aproximado = min(sinais_ruido_disponiveis, key=lambda x: abs(x - sinal_ruido))

            resultado = df[df['S/N'] == sinal_ruido_aproximado][temperatura_aproximada]
            return float(resultado.values[0]) if not resultado.empty else None
        else:
            return None


# Exemplo de uso
temperatura = int(input("Digite a temperatura desejada (exemplo: 4000): "))
sinal_ruido = int(input("Digite o sinal ruído: "))
elemento = str(input("Digite o elemento ou all: "))
resultados = get_uncertainty_signal(temperatura, sinal_ruido, elemento)
print(resultados)
'''



# Função para buscar incertezas com aproximação do sinal-ruído e da temperatura, incluindo propagação de incertezas
def get_uncertainty_signal(temperatura, sinal_ruido, elemento):
    # Aproxima a temperatura para a mais próxima disponível
    temperaturas_disponiveis = [col for col in dataframes['Fe'].columns if isinstance(col, int)]
    temperatura_aproximada = min(temperaturas_disponiveis, key=lambda x: abs(x - temperatura))

    if elemento == "all":
        resultados = {}
        for elem, df in dataframes.items():
            # Aproxima o sinal-ruído para o mais próximo disponível na tabela
            sinais_ruido_disponiveis = df['S/N'].tolist()
            sinal_ruido_aproximado = min(sinais_ruido_disponiveis, key=lambda x: abs(x - sinal_ruido))

            resultado = df[df['S/N'] == sinal_ruido_aproximado][temperatura_aproximada]
            if not resultado.empty:
                incerteza = float(resultado.values[0])
                resultados[elem] = incerteza
            else:
                resultados[elem] = None

        # Propagação da incerteza
        incertezas = [inc for inc in resultados.values() if inc is not None]
        if incertezas:
            incerteza_total = np.sqrt(sum(inc ** 2 for inc in incertezas))
            return f'Incerteza propagada: {float(incerteza_total)}'
        else:
            return resultados, None
    else:
        # Caso específico para um elemento
        df = dataframes.get(elemento)
        if df is not None:
            # Aproxima o sinal-ruído para o mais próximo disponível na tabela
            sinais_ruido_disponiveis = df['S/N'].tolist()
            sinal_ruido_aproximado = min(sinais_ruido_disponiveis, key=lambda x: abs(x - sinal_ruido))

            resultado = df[df['S/N'] == sinal_ruido_aproximado][temperatura_aproximada]
            if not resultado.empty:
                incerteza = float(resultado.values[0])
                return {elemento: incerteza}, f'Incerteza propagada: {float(incerteza)}'
            else:
                return None, None
        else:
            return None, None

